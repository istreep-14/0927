name,type,description,origin,scope
game_uuid,string (UUID),"Unique game identifier (primary key; hide in sheet)",json,main
url,string (URL),"Public game viewer URL",json,main
end_dt,datetime,"Local end datetime (from end_time)",derived,main
format,string,"Unified format per rules/time_class mapping",derived,main
my_color,string,"My color (white/black)",derived,main
my_rating,integer,"My rating at game time",derived,main
opp_username,string,"Opponent username",derived,main
opp_rating,integer,"Opponent rating at game time",derived,main
my_outcome,string,"My outcome win/lose/draw",derived,main
end_reason,string,"Reason game ended (loser result or draw reason)",derived,main

# Secondary (Games_Meta) — computed/stored but not in main sheet
movetext,string,"Full PGN movetext (headers separate)",pgn,meta
time_control,string,"PGN-compliant time control (e.g., 600 or 180+2)",json,meta
tc_base,integer,"Derived: live base time from time_control",derived,meta
tc_inc,integer,"Derived: live increment from time_control",derived,meta
tc_corr,integer,"Derived: daily response seconds from time_control (1/SECONDS)",derived,meta
eco_code,string,"PGN ECO code",pgn,meta
eco_url,string (URL),"Opening reference URL from JSON (if available)",json,meta
start_dt,datetime,"Local start datetime (from start_time or PGN UTC)",derived,meta
duration,integer,"Duration seconds (end_time - start_time when available)",derived,meta
rated,boolean,"Whether the game affected rating",json,meta
time_class,string,"Time category (bullet, blitz, rapid, daily)",json,meta
rules,string,"Game rules/variant (e.g., chess, chess960)",json,meta
type,string,"Derived type: daily if time_class is daily; else live",derived,meta
url_numeric_id,string,"Numeric id parsed from end of url (meta only)",derived,meta
utc_date,string (YYYY.MM.DD),"PGN UTCDate (emitted)",pgn,meta
utc_time,string (HH:MM:SS),"PGN UTCTime (emitted)",pgn,meta
viewer_link,string (URL),"PGN Link (viewer)",pgn,meta
tournament_link,string (URL),"Published Data API tournament link (optional)",json,meta
match_link,string (URL),"Published Data API team match link (optional)",json,meta
white.rating,integer,"White rating at time of game",json,meta
white.result,string,"White result code",json,meta
white.id,string (URL),"Published Data API player URL for white",json,meta
white.username,string,"White username",json,meta
white.uuid,string (UUID),"White member unique ID",json,meta
black.rating,integer,"Black rating at time of game",json,meta
black.result,string,"Black result code",json,meta
black.id,string (URL),"Published Data API player URL for black",json,meta
black.username,string,"Black username",json,meta
black.uuid,string (UUID),"Black member unique ID",json,meta
my_username,string,"My username (resolved)",derived,meta
my_uuid,string (UUID),"My member unique ID",derived,meta
my_result,string,"My result code",derived,meta
my_id,string (URL),"My Published Data API player URL",derived,meta
my_expected_score,number,"My expected score (0–1, 4 decimals)",derived,meta
opp_uuid,string (UUID),"Opponent member unique ID",derived,meta
opp_result,string,"Opponent result code",derived,meta
opp_id,string (URL),"Opponent Published Data API player URL",derived,meta
opp_expected_score,number,"Opponent expected score (0–1, 4 decimals)",derived,meta
my_color,string,"My color (duplicate for meta joins)",derived,meta
opp_color,string,"Opponent color",derived,meta
accuracies.white,number,"White accuracy percentage (0–100)",json,meta
accuracies.black,number,"Black accuracy percentage (0–100)",json,meta
san_moves,json-string,"SAN moves array (single-quoted JSON)",derived,meta
clock_times,json-string,"Post-move clock times aligned to SAN (single-quoted JSON)",derived,meta
time_spent,json-string,"Per-move time spent aligned to SAN (single-quoted JSON)",derived,meta
my_rating_before,integer,"My rating before this game (actual or estimated)",derived,meta
my_rating_change,integer,"My rating change for this game (actual or estimated)",derived,meta
opp_rating_before,integer,"Opponent rating before this game (actual or estimated)",derived,meta
opp_rating_change,integer,"Opponent rating change for this game (actual or estimated)",derived,meta
rating_change_source,string,"Source of rating change: actual|estimated",derived,meta
enriched_callback,boolean,"Whether callback data has been fetched and stored",derived,meta
enriched_arrays,boolean,"Whether SAN/clock/time arrays have been computed",derived,meta
last_updated,datetime,"Last update timestamp for this row",derived,meta

# Callback enrichment (stable per game)
callback_color_of_winner,string,"Winner color from callback",callback,meta
callback_game_end_reason,string,"Game end reason from callback",callback,meta
callback_result_message,string,"Human-readable result message",callback,meta
callback_is_live_game,boolean,"Is live game flag",callback,meta
callback_is_finished,boolean,"Is finished flag",callback,meta
callback_is_rated,boolean,"Is rated flag",callback,meta
callback_is_analyzable,boolean,"Is analyzable flag",callback,meta
callback_is_abortable,boolean,"Is abortable flag",callback,meta
callback_is_resignable,boolean,"Is resignable flag",callback,meta
callback_is_stalemate,boolean,"Is stalemate flag",callback,meta
callback_is_checkmate,boolean,"Is checkmate flag",callback,meta
callback_allow_vacation,boolean,"Vacation allowed flag",callback,meta
callback_type,string,"Callback game type (e.g., chess)",callback,meta
callback_type_name,string,"Callback type name (e.g., Standard Chess)",callback,meta
callback_ply_count,integer,"Ply count from callback",callback,meta
callback_base_time,integer,"Base time from callback",callback,meta
callback_time_increment,integer,"Time increment from callback",callback,meta
callback_move_list,string,"Callback move list encoding",callback,meta
callback_move_timestamps,string,"Callback per-move timestamps CSV",callback,meta

# Callback player snapshots (stable per game)
callback_my_user_id,integer,"Numeric user id (me)",callback,meta
callback_opp_user_id,integer,"Numeric user id (opponent)",callback,meta
callback_my_uuid,string,"Player UUID (me) from callback",callback,meta
callback_opp_uuid,string,"Player UUID (opponent) from callback",callback,meta
callback_my_username,string,"Username (me) from callback",callback,meta
callback_opp_username,string,"Username (opponent) from callback",callback,meta
callback_my_rating_change,integer,"Rating change (me) from callback",callback,meta
callback_opp_rating_change,integer,"Rating change (opponent) from callback",callback,meta

# Callback volatile snapshots (optional but included)
callback_my_membership_level,string,"Membership level (me)",callback,meta
callback_opp_membership_level,string,"Membership level (opponent)",callback,meta
callback_my_membership_code,string,"Membership code (me)",callback,meta
callback_opp_membership_code,string,"Membership code (opponent)",callback,meta
callback_my_country_id,integer,"Country id (me)",callback,meta
callback_opp_country_id,integer,"Country id (opponent)",callback,meta
callback_my_games_in_progress,integer,"Games in progress (me)",callback,meta
callback_opp_games_in_progress,integer,"Games in progress (opponent)",callback,meta
callback_my_is_online,boolean,"Is online (me) at snapshot",callback,meta
callback_opp_is_online,boolean,"Is online (opponent) at snapshot",callback,meta
callback_my_is_in_livechess,boolean,"Is in livechess (me)",callback,meta
callback_opp_is_in_livechess,boolean,"Is in livechess (opponent)",callback,meta
callback_my_flair_id,string,"Flair id (me) if present",callback,meta
callback_opp_flair_id,string,"Flair id (opponent) if present",callback,meta